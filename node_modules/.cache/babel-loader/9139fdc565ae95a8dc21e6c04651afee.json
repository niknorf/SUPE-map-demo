{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vlasoks\\\\Documents\\\\GitHub\\\\SUPE-map-demo\\\\src\\\\components\\\\Graphic.js\";\nimport React from 'react';\nimport Plotly from \"plotly.js\";\nimport * as d3 from 'd3';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport data from '../graph_4.csv';\nconst Plot = createPlotlyComponent(Plotly);\nexport class GraphicGroup extends React.Component {\n  // console.log(this.props.name);\n  render() {\n    return /*#__PURE__*/React.createElement(\"testFunction\", {\n      name: this.props.name,\n      x_coordinates: this.props.x_coordinates,\n      y_coordinates: this.props.y_coordinates,\n      type: this.props.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nfunction TestFunction() {\n  console.log(SingleGraphic());\n}\n\nfunction SingleGraphic(props) {\n  // if (props.type === 'scatter') {\n  d3.csv(data, function (cvs_data) {\n    const trace1 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL High',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.High'),\n      line: {\n        color: '#17BECF'\n      }\n    };\n    const trace2 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL Low',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.Low'),\n      line: {\n        color: '#7F7F7F'\n      }\n    };\n    const data_combined = [trace1, trace2];\n    const layout = {\n      title: 'Time Series with Rangeslider',\n      xaxis: {\n        autorange: true,\n        range: ['2015-02-17', '2017-02-16'],\n        rangeselector: {\n          buttons: [{\n            count: 1,\n            label: '1m',\n            step: 'month',\n            stepmode: 'backward'\n          }, {\n            count: 6,\n            label: '6m',\n            step: 'month',\n            stepmode: 'backward'\n          }, {\n            step: 'all'\n          }]\n        },\n        rangeslider: {\n          range: ['2015-02-17', '2017-02-16']\n        },\n        type: 'date'\n      },\n      yaxis: {\n        autorange: true,\n        range: [86.8700008333, 138.870004167],\n        type: 'linear'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Plot, {\n      data: [{\n        x: [1, 2, 3],\n        y: [2, 6, 3],\n        type: 'scatter',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }, {\n        type: 'bar',\n        x: [1, 2, 3],\n        y: [2, 5, 3]\n      }],\n      layout: {\n        width: 320,\n        height: 240,\n        title: 'A Fancy Plot'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    });\n  }); // console.log(data_combined);\n  // return <Plot data={[\n  //     {\n  //       x: [\n  //         1, 2, 3\n  //       ],\n  //       y: [\n  //         2, 6, 3\n  //       ],\n  //       type: 'scatter',\n  //       mode: 'lines+markers',\n  //       marker: {\n  //         color: 'red'\n  //       }\n  //     }, {\n  //       type: 'bar',\n  //       x: [\n  //         1, 2, 3\n  //       ],\n  //       y: [2, 5, 3]\n  //     }\n  //   ]} layout={{\n  //     width: 320,\n  //     height: 240,\n  //     title: 'A Fancy Plot'\n  //   }}/>\n}\n\nfunction GetCSVData() {\n  d3.csv(data, function (cvs_data) {\n    const trace1 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL High',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.High'),\n      line: {\n        color: '#17BECF'\n      }\n    };\n    const trace2 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL Low',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.Low'),\n      line: {\n        color: '#7F7F7F'\n      }\n    };\n    const data_combined = [trace1, trace2];\n    console.log(data_combined);\n  });\n}\n\nfunction unpack(rows, key) {\n  return rows.map(function (row) {\n    return row[key];\n  });\n}","map":{"version":3,"sources":["C:/Users/vlasoks/Documents/GitHub/SUPE-map-demo/src/components/Graphic.js"],"names":["React","Plotly","d3","createPlotlyComponent","data","Plot","GraphicGroup","Component","render","props","name","x_coordinates","y_coordinates","type","TestFunction","console","log","SingleGraphic","csv","cvs_data","trace1","mode","x","unpack","y","line","color","trace2","data_combined","layout","title","xaxis","autorange","range","rangeselector","buttons","count","label","step","stepmode","rangeslider","yaxis","marker","width","height","GetCSVData","rows","key","map","row"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,MAAMC,IAAI,GAAGF,qBAAqB,CAACF,MAAD,CAAlC;AAEA,OAAO,MAAMK,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AAChD;AACAC,EAAAA,MAAM,GAAG;AACP,wBAAQ;AAAc,MAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,IAA/B;AAAqC,MAAA,aAAa,EAAE,KAAKD,KAAL,CAAWE,aAA/D;AAA8E,MAAA,aAAa,EAAE,KAAKF,KAAL,CAAWG,aAAxG;AAAuH,MAAA,IAAI,EAAE,KAAKH,KAAL,CAAWI,IAAxI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD;;AAJ+C;;AAOlD,SAASC,YAAT,GAAwB;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYC,aAAa,EAAzB;AACC;;AAED,SAASA,aAAT,CAAuBR,KAAvB,EAA8B;AAE5B;AACAP,EAAAA,EAAE,CAACgB,GAAH,CAAOd,IAAP,EAAa,UAASe,QAAT,EAAmB;AAC9B,UAAMC,MAAM,GAAG;AACbP,MAAAA,IAAI,EAAE,SADO;AAEbQ,MAAAA,IAAI,EAAE,OAFO;AAGbX,MAAAA,IAAI,EAAE,WAHO;AAIbY,MAAAA,CAAC,EAAEC,MAAM,CAACJ,QAAD,EAAW,MAAX,CAJI;AAKbK,MAAAA,CAAC,EAAED,MAAM,CAACJ,QAAD,EAAW,WAAX,CALI;AAMbM,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AADH;AANO,KAAf;AAWA,UAAMC,MAAM,GAAG;AACbd,MAAAA,IAAI,EAAE,SADO;AAEbQ,MAAAA,IAAI,EAAE,OAFO;AAGbX,MAAAA,IAAI,EAAE,UAHO;AAIbY,MAAAA,CAAC,EAAEC,MAAM,CAACJ,QAAD,EAAW,MAAX,CAJI;AAKbK,MAAAA,CAAC,EAAED,MAAM,CAACJ,QAAD,EAAW,UAAX,CALI;AAMbM,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AADH;AANO,KAAf;AAWA,UAAME,aAAa,GAAG,CAACR,MAAD,EAASO,MAAT,CAAtB;AAEA,UAAME,MAAM,GAAG;AACbC,MAAAA,KAAK,EAAE,8BADM;AAEbC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE,IADN;AAELC,QAAAA,KAAK,EAAE,CACL,YADK,EACS,YADT,CAFF;AAKLC,QAAAA,aAAa,EAAE;AACbC,UAAAA,OAAO,EAAE,CACP;AACEC,YAAAA,KAAK,EAAE,CADT;AAEEC,YAAAA,KAAK,EAAE,IAFT;AAGEC,YAAAA,IAAI,EAAE,OAHR;AAIEC,YAAAA,QAAQ,EAAE;AAJZ,WADO,EAMJ;AACDH,YAAAA,KAAK,EAAE,CADN;AAEDC,YAAAA,KAAK,EAAE,IAFN;AAGDC,YAAAA,IAAI,EAAE,OAHL;AAIDC,YAAAA,QAAQ,EAAE;AAJT,WANI,EAWJ;AACDD,YAAAA,IAAI,EAAE;AADL,WAXI;AADI,SALV;AAsBLE,QAAAA,WAAW,EAAE;AACXP,UAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,YAAf;AADI,SAtBR;AAyBLpB,QAAAA,IAAI,EAAE;AAzBD,OAFM;AA6Bb4B,MAAAA,KAAK,EAAE;AACLT,QAAAA,SAAS,EAAE,IADN;AAELC,QAAAA,KAAK,EAAE,CACL,aADK,EACU,aADV,CAFF;AAKLpB,QAAAA,IAAI,EAAE;AALD;AA7BM,KAAf;AAsCD,wBAAO,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,CACf;AACES,QAAAA,CAAC,EAAE,CACD,CADC,EACE,CADF,EACK,CADL,CADL;AAIEE,QAAAA,CAAC,EAAE,CACD,CADC,EACE,CADF,EACK,CADL,CAJL;AAOEX,QAAAA,IAAI,EAAE,SAPR;AAQEQ,QAAAA,IAAI,EAAE,eARR;AASEqB,QAAAA,MAAM,EAAE;AACNhB,UAAAA,KAAK,EAAE;AADD;AATV,OADe,EAaZ;AACDb,QAAAA,IAAI,EAAE,KADL;AAEDS,QAAAA,CAAC,EAAE,CACD,CADC,EACE,CADF,EACK,CADL,CAFF;AAKDE,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AALF,OAbY,CAAZ;AAoBF,MAAA,MAAM,EAAE;AACTmB,QAAAA,KAAK,EAAE,GADE;AAETC,QAAAA,MAAM,EAAE,GAFC;AAGTd,QAAAA,KAAK,EAAE;AAHE,OApBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AA2BA,GA1FD,EAH4B,CA+F5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,SAASe,UAAT,GAAsB;AACpB3C,EAAAA,EAAE,CAACgB,GAAH,CAAOd,IAAP,EAAa,UAASe,QAAT,EAAmB;AAC9B,UAAMC,MAAM,GAAG;AACbP,MAAAA,IAAI,EAAE,SADO;AAEbQ,MAAAA,IAAI,EAAE,OAFO;AAGbX,MAAAA,IAAI,EAAE,WAHO;AAIbY,MAAAA,CAAC,EAAEC,MAAM,CAACJ,QAAD,EAAW,MAAX,CAJI;AAKbK,MAAAA,CAAC,EAAED,MAAM,CAACJ,QAAD,EAAW,WAAX,CALI;AAMbM,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AADH;AANO,KAAf;AAWA,UAAMC,MAAM,GAAG;AACbd,MAAAA,IAAI,EAAE,SADO;AAEbQ,MAAAA,IAAI,EAAE,OAFO;AAGbX,MAAAA,IAAI,EAAE,UAHO;AAIbY,MAAAA,CAAC,EAAEC,MAAM,CAACJ,QAAD,EAAW,MAAX,CAJI;AAKbK,MAAAA,CAAC,EAAED,MAAM,CAACJ,QAAD,EAAW,UAAX,CALI;AAMbM,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AADH;AANO,KAAf;AAWA,UAAME,aAAa,GAAG,CAACR,MAAD,EAASO,MAAT,CAAtB;AAEAZ,IAAAA,OAAO,CAACC,GAAR,CAAYY,aAAZ;AAED,GA3BD;AA4BD;;AAED,SAASL,MAAT,CAAgBuB,IAAhB,EAAsBC,GAAtB,EAA2B;AACzB,SAAOD,IAAI,CAACE,GAAL,CAAS,UAASC,GAAT,EAAc;AAC5B,WAAOA,GAAG,CAACF,GAAD,CAAV;AACD,GAFM,CAAP;AAGD","sourcesContent":["import React from 'react';\r\nimport Plotly from \"plotly.js\"\r\nimport * as d3 from 'd3'\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nimport data from '../graph_4.csv';\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nexport class GraphicGroup extends React.Component {\r\n  // console.log(this.props.name);\r\n  render() {\r\n    return (<testFunction name={this.props.name} x_coordinates={this.props.x_coordinates} y_coordinates={this.props.y_coordinates} type={this.props.type}/>);\r\n  }\r\n}\r\n\r\nfunction TestFunction (){\r\nconsole.log(SingleGraphic());\r\n}\r\n\r\nfunction SingleGraphic(props) {\r\n\r\n  // if (props.type === 'scatter') {\r\n  d3.csv(data, function(cvs_data) {\r\n    const trace1 = {\r\n      type: \"scatter\",\r\n      mode: \"lines\",\r\n      name: 'AAPL High',\r\n      x: unpack(cvs_data, 'Date'),\r\n      y: unpack(cvs_data, 'AAPL.High'),\r\n      line: {\r\n        color: '#17BECF'\r\n      }\r\n    };\r\n\r\n    const trace2 = {\r\n      type: \"scatter\",\r\n      mode: \"lines\",\r\n      name: 'AAPL Low',\r\n      x: unpack(cvs_data, 'Date'),\r\n      y: unpack(cvs_data, 'AAPL.Low'),\r\n      line: {\r\n        color: '#7F7F7F'\r\n      }\r\n    };\r\n\r\n    const data_combined = [trace1, trace2];\r\n\r\n    const layout = {\r\n      title: 'Time Series with Rangeslider',\r\n      xaxis: {\r\n        autorange: true,\r\n        range: [\r\n          '2015-02-17', '2017-02-16'\r\n        ],\r\n        rangeselector: {\r\n          buttons: [\r\n            {\r\n              count: 1,\r\n              label: '1m',\r\n              step: 'month',\r\n              stepmode: 'backward'\r\n            }, {\r\n              count: 6,\r\n              label: '6m',\r\n              step: 'month',\r\n              stepmode: 'backward'\r\n            }, {\r\n              step: 'all'\r\n            }\r\n          ]\r\n        },\r\n        rangeslider: {\r\n          range: ['2015-02-17', '2017-02-16']\r\n        },\r\n        type: 'date'\r\n      },\r\n      yaxis: {\r\n        autorange: true,\r\n        range: [\r\n          86.8700008333, 138.870004167\r\n        ],\r\n        type: 'linear'\r\n      }\r\n    };\r\n\r\n   return <Plot data={[\r\n       {\r\n         x: [\r\n           1, 2, 3\r\n         ],\r\n         y: [\r\n           2, 6, 3\r\n         ],\r\n         type: 'scatter',\r\n         mode: 'lines+markers',\r\n         marker: {\r\n           color: 'red'\r\n         }\r\n       }, {\r\n         type: 'bar',\r\n         x: [\r\n           1, 2, 3\r\n         ],\r\n         y: [2, 5, 3]\r\n       }\r\n     ]} layout={{\r\n       width: 320,\r\n       height: 240,\r\n       title: 'A Fancy Plot'\r\n     }}\r\n   />;\r\n\r\n  });\r\n\r\n  // console.log(data_combined);\r\n  // return <Plot data={[\r\n  //     {\r\n  //       x: [\r\n  //         1, 2, 3\r\n  //       ],\r\n  //       y: [\r\n  //         2, 6, 3\r\n  //       ],\r\n  //       type: 'scatter',\r\n  //       mode: 'lines+markers',\r\n  //       marker: {\r\n  //         color: 'red'\r\n  //       }\r\n  //     }, {\r\n  //       type: 'bar',\r\n  //       x: [\r\n  //         1, 2, 3\r\n  //       ],\r\n  //       y: [2, 5, 3]\r\n  //     }\r\n  //   ]} layout={{\r\n  //     width: 320,\r\n  //     height: 240,\r\n  //     title: 'A Fancy Plot'\r\n  //   }}/>\r\n}\r\n\r\nfunction GetCSVData() {\r\n  d3.csv(data, function(cvs_data) {\r\n    const trace1 = {\r\n      type: \"scatter\",\r\n      mode: \"lines\",\r\n      name: 'AAPL High',\r\n      x: unpack(cvs_data, 'Date'),\r\n      y: unpack(cvs_data, 'AAPL.High'),\r\n      line: {\r\n        color: '#17BECF'\r\n      }\r\n    };\r\n\r\n    const trace2 = {\r\n      type: \"scatter\",\r\n      mode: \"lines\",\r\n      name: 'AAPL Low',\r\n      x: unpack(cvs_data, 'Date'),\r\n      y: unpack(cvs_data, 'AAPL.Low'),\r\n      line: {\r\n        color: '#7F7F7F'\r\n      }\r\n    };\r\n\r\n    const data_combined = [trace1, trace2];\r\n\r\n    console.log(data_combined);\r\n\r\n  });\r\n}\r\n\r\nfunction unpack(rows, key) {\r\n  return rows.map(function(row) {\r\n    return row[key];\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}