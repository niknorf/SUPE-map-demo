{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vlasoks\\\\Documents\\\\GitHub\\\\SUPE-map-demo\\\\src\\\\components\\\\Map2.js\";\nimport React from 'react';\nimport { Map, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport '../map.css';\nimport 'react-leaflet-markercluster/dist/styles.min.css';\nimport customData from '../data_map.json';\nimport buildingsPolygon from '../building-polygon.json';\nimport polygon_data from './polygon_data.json';\nimport L from 'leaflet';\ndelete L.Icon.Default.prototype._getIconUrl;\nexport class GeneralMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buildingsPolygon: '',\n      click_happened: []\n    };\n    this.showBuilding = this.showBuilding.bind(this);\n  }\n\n  showBuilding(e) {\n    var array = [];\n    e.layer.options.data.features.map(function (item) {\n      if (e.layer.feature.properties.balance_index === item.properties.balance_index) {\n        array.push(item);\n      }\n    }); // console.log(e.layer.feature.properties.balance_index, array);\n\n    this.setState(prevState => {\n      let itemList = prevState.click_happened.slice();\n      console.log(prevState.click_happened.slice());\n      return {\n        click_happened: prevState.click_happened.slice()\n      };\n    }); // groupBuilding.group_building.map(function(item, i){\n    //   if(item.balance_index == '0'){\n    //     console.log(item);\n    //\n    //   }\n    // })\n    // this.setState({filterText: filterText});\n  }\n\n  render() {\n    const filterText = this.props.filterText;\n    const style = {\n      fillColor: 'red',\n      weight: 2,\n      opacity: 1,\n      color: 'white',\n      //Outline color\n      fillOpacity: 0.7\n    }; // var click_state = this.state.click_happened.length > 1\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      className: \"markercluster-map\",\n      center: position,\n      zoom: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\",\n      attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GeoJSON, {\n      onClick: this.showBuilding,\n      key: 'building_polygons',\n      data: buildingsPolygon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }), \" \", this.state.click_happened.map((ds, ix) => {\n      return /*#__PURE__*/React.createElement(GeoJSON, {\n        key: ix,\n        data: ds,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }\n      });\n    })));\n  }\n\n}\nconst position = [60.08, 30.33];\n\nfunction PlaceMarkers() {\n  var markers = []; // data prossesing, adding markers\n\n  for (var i = 0; i < customData.length; i++) {\n    var obj = customData[i];\n    var title = obj.loss_probability;\n    var icon_url = 'red.png';\n\n    if (parseFloat(obj.loss_probability) <= 20) {\n      icon_url = 'green.png';\n    } else if (parseFloat(obj.loss_probability) >= 21 && parseFloat(obj.loss_probability) <= 70) {\n      icon_url = 'yellow.png';\n    }\n\n    const m_icon = new L.Icon({\n      iconUrl: require('../img/' + icon_url),\n      iconSize: [40, 40]\n    });\n    markers.push( /*#__PURE__*/React.createElement(Marker, {\n      position: [obj.lat, obj.lon],\n      key: i,\n      icon: m_icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 18\n      }\n    }));\n  }\n\n  return markers;\n} // function GeoJsonLayer() {\n//\n//\n//\n//    console.log(buildingsPolygon);\n//   return ;\n// }","map":{"version":3,"sources":["C:/Users/vlasoks/Documents/GitHub/SUPE-map-demo/src/components/Map2.js"],"names":["React","Map","TileLayer","Marker","Popup","GeoJSON","MarkerClusterGroup","customData","buildingsPolygon","polygon_data","L","Icon","Default","prototype","_getIconUrl","GeneralMap","Component","constructor","props","state","click_happened","showBuilding","bind","e","array","layer","options","data","features","map","item","feature","properties","balance_index","push","setState","prevState","itemList","slice","console","log","render","filterText","style","fillColor","weight","opacity","color","fillOpacity","position","ds","ix","PlaceMarkers","markers","i","length","obj","title","loss_probability","icon_url","parseFloat","m_icon","iconUrl","require","iconSize","lat","lon"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,SAAb,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuCC,OAAvC,QAAqD,eAArD;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAO,YAAP;AACA,OAAO,iDAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,CAAP,MAAc,SAAd;AAEA,OAAOA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeC,SAAf,CAAyBC,WAAhC;AAEA,OAAO,MAAMC,UAAN,SAAyBf,KAAK,CAACgB,SAA/B,CAAyC;AAE9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXX,MAAAA,gBAAgB,EAAE,EADP;AAEXY,MAAAA,cAAc,EAAE;AAFL,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACE,CAAD,EAAI;AAChB,QAAIC,KAAK,GAAG,EAAZ;AACAD,IAAAA,CAAC,CAACE,KAAF,CAAQC,OAAR,CAAgBC,IAAhB,CAAqBC,QAArB,CAA8BC,GAA9B,CAAkC,UAASC,IAAT,EAAe;AAC/C,UAAIP,CAAC,CAACE,KAAF,CAAQM,OAAR,CAAgBC,UAAhB,CAA2BC,aAA3B,KAA6CH,IAAI,CAACE,UAAL,CAAgBC,aAAjE,EAAgF;AAC9ET,QAAAA,KAAK,CAACU,IAAN,CAAWJ,IAAX;AACD;AACF,KAJD,EAFgB,CAOd;;AAEA,SAAKK,QAAL,CAAeC,SAAD,IAAe;AAEjC,UAAIC,QAAQ,GAAED,SAAS,CAAChB,cAAV,CAAyBkB,KAAzB,EAAd;AACMC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAS,CAAChB,cAAV,CAAyBkB,KAAzB,EAAZ;AAEA,aAAO;AACLlB,QAAAA,cAAc,EAACgB,SAAS,CAAChB,cAAV,CAAyBkB,KAAzB;AADV,OAAP;AAGD,KARD,EATc,CAmBd;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAMC,UAAU,GAAG,KAAKxB,KAAL,CAAWwB,UAA9B;AAEA,UAAMC,KAAK,GAAG;AACZC,MAAAA,SAAS,EAAE,KADC;AAEZC,MAAAA,MAAM,EAAE,CAFI;AAGZC,MAAAA,OAAO,EAAE,CAHG;AAIZC,MAAAA,KAAK,EAAE,OAJK;AAII;AAChBC,MAAAA,WAAW,EAAE;AALD,KAAd,CAHO,CAWP;;AAEA,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACN,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAmC,MAAA,MAAM,EAAEC,QAA3C;AAAqD,MAAA,IAAI,EAAE,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAC,sEAAf;AAAsF,MAAA,WAAW,EAAC,0EAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAK5B,YAAvB;AAAqC,MAAA,GAAG,EAAE,mBAA1C;AAA+D,MAAA,IAAI,EAAEb,gBAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,OAGI,KAAKW,KAAL,CAAWC,cAAX,CAA0BS,GAA1B,CAA8B,CAACqB,EAAD,EAAKC,EAAL,KAAY;AACxC,0BAAQ,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,EAAd;AAAkB,QAAA,IAAI,EAAED,EAAxB;AAA4B,QAAA,KAAK,EAAEP,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACD,KAFD,CAHJ,CADM,CAAR;AAUD;;AA9D6C;AAiEhD,MAAMM,QAAQ,GAAG,CAAC,KAAD,EAAQ,KAAR,CAAjB;;AAEA,SAASG,YAAT,GAAwB;AACtB,MAAIC,OAAO,GAAG,EAAd,CADsB,CAGtB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/C,UAAU,CAACgD,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,QAAIE,GAAG,GAAGjD,UAAU,CAAC+C,CAAD,CAApB;AACA,QAAIG,KAAK,GAAGD,GAAG,CAACE,gBAAhB;AAEA,QAAIC,QAAQ,GAAG,SAAf;;AAEA,QAAIC,UAAU,CAACJ,GAAG,CAACE,gBAAL,CAAV,IAAoC,EAAxC,EAA4C;AAC1CC,MAAAA,QAAQ,GAAG,WAAX;AACD,KAFD,MAEO,IAAIC,UAAU,CAACJ,GAAG,CAACE,gBAAL,CAAV,IAAoC,EAApC,IAA0CE,UAAU,CAACJ,GAAG,CAACE,gBAAL,CAAV,IAAoC,EAAlF,EAAsF;AAC3FC,MAAAA,QAAQ,GAAG,YAAX;AACD;;AAED,UAAME,MAAM,GAAG,IAAInD,CAAC,CAACC,IAAN,CAAW;AACxBmD,MAAAA,OAAO,EAAEC,OAAO,CAAC,YAAYJ,QAAb,CADQ;AAExBK,MAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL;AAFc,KAAX,CAAf;AAKAX,IAAAA,OAAO,CAACnB,IAAR,eAAa,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE,CAACsB,GAAG,CAACS,GAAL,EAAUT,GAAG,CAACU,GAAd,CAAlB;AAAsC,MAAA,GAAG,EAAEZ,CAA3C;AAA8C,MAAA,IAAI,EAAEO,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AAED;;AAED,SAAQR,OAAR;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport {Map, TileLayer, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport '../map.css';\r\nimport 'react-leaflet-markercluster/dist/styles.min.css';\r\nimport customData from '../data_map.json';\r\nimport buildingsPolygon from '../building-polygon.json'\r\nimport polygon_data from './polygon_data.json'\r\nimport L from 'leaflet';\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nexport class GeneralMap extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      buildingsPolygon: '',\r\n      click_happened: []\r\n    };\r\n    this.showBuilding = this.showBuilding.bind(this);\r\n  }\r\n\r\n  showBuilding(e) {\r\n  var array = [];\r\n  e.layer.options.data.features.map(function(item) {\r\n    if (e.layer.feature.properties.balance_index === item.properties.balance_index) {\r\n      array.push(item);\r\n    }\r\n  });\r\n    // console.log(e.layer.feature.properties.balance_index, array);\r\n\r\n    this.setState((prevState) => {\r\n\r\nlet itemList =prevState.click_happened.slice();\r\n      console.log(prevState.click_happened.slice());\r\n\r\n      return {\r\n        click_happened:prevState.click_happened.slice(),\r\n      }\r\n    });\r\n\r\n    // groupBuilding.group_building.map(function(item, i){\r\n    //   if(item.balance_index == '0'){\r\n    //     console.log(item);\r\n    //\r\n    //   }\r\n    // })\r\n    // this.setState({filterText: filterText});\r\n  }\r\n\r\n  render() {\r\n    const filterText = this.props.filterText;\r\n\r\n    const style = {\r\n      fillColor: 'red',\r\n      weight: 2,\r\n      opacity: 1,\r\n      color: 'white', //Outline color\r\n      fillOpacity: 0.7\r\n    };\r\n\r\n    // var click_state = this.state.click_happened.length > 1\r\n\r\n    return (<div>\r\n      <Map className=\"markercluster-map\" center={position} zoom={16}>\r\n        <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\" attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"/>\r\n        <GeoJSON onClick={this.showBuilding} key={'building_polygons'} data={buildingsPolygon}/> {\r\n          this.state.click_happened.map((ds, ix) => {\r\n            return (<GeoJSON key={ix} data={ds} style={style}/>)\r\n          })\r\n        }\r\n      </Map>\r\n    </div>);\r\n  }\r\n}\r\n\r\nconst position = [60.08, 30.33];\r\n\r\nfunction PlaceMarkers() {\r\n  var markers = [];\r\n\r\n  // data prossesing, adding markers\r\n  for (var i = 0; i < customData.length; i++) {\r\n    var obj = customData[i];\r\n    var title = obj.loss_probability;\r\n\r\n    var icon_url = 'red.png';\r\n\r\n    if (parseFloat(obj.loss_probability) <= 20) {\r\n      icon_url = 'green.png';\r\n    } else if (parseFloat(obj.loss_probability) >= 21 && parseFloat(obj.loss_probability) <= 70) {\r\n      icon_url = 'yellow.png';\r\n    }\r\n\r\n    const m_icon = new L.Icon({\r\n      iconUrl: require('../img/' + icon_url),\r\n      iconSize: [40, 40]\r\n    });\r\n\r\n    markers.push(<Marker position={[obj.lat, obj.lon]} key={i} icon={m_icon}></Marker>);\r\n\r\n  }\r\n\r\n  return (markers)\r\n}\r\n\r\n// function GeoJsonLayer() {\r\n//\r\n//\r\n//\r\n//    console.log(buildingsPolygon);\r\n//   return ;\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}