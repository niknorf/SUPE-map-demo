{"ast":null,"code":"/*\r\n Copyright 2012-2015, Yahoo Inc.\r\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\r\n */\n'use strict';\n/**\r\n * istanbul-lib-coverage exports an API that allows you to create and manipulate\r\n * file coverage, coverage maps (a set of file coverage objects) and summary\r\n * coverage objects. File coverage for the same file can be merged as can\r\n * entire coverage maps.\r\n *\r\n * @module Exports\r\n */\n\nconst CoverageSummary = require('./lib/file').CoverageSummary;\n\nconst FileCoverage = require('./lib/file').FileCoverage;\n\nconst CoverageMap = require('./lib/coverage-map').CoverageMap;\n\nmodule.exports = {\n  /**\r\n   * creates a coverage summary object\r\n   * @param {Object} obj an argument with the same semantics\r\n   *  as the one passed to the `CoverageSummary` constructor\r\n   * @returns {CoverageSummary}\r\n   */\n  createCoverageSummary(obj) {\n    if (obj && obj instanceof CoverageSummary) {\n      return obj;\n    }\n\n    return new CoverageSummary(obj);\n  },\n\n  /**\r\n   * creates a CoverageMap object\r\n   * @param {Object} obj optional - an argument with the same semantics\r\n   *  as the one passed to the CoverageMap constructor.\r\n   * @returns {CoverageMap}\r\n   */\n  createCoverageMap(obj) {\n    if (obj && obj instanceof CoverageMap) {\n      return obj;\n    }\n\n    return new CoverageMap(obj);\n  },\n\n  /**\r\n   * creates a FileCoverage object\r\n   * @param {Object} obj optional - an argument with the same semantics\r\n   *  as the one passed to the FileCoverage constructor.\r\n   * @returns {FileCoverage}\r\n   */\n  createFileCoverage(obj) {\n    if (obj && obj instanceof FileCoverage) {\n      return obj;\n    }\n\n    return new FileCoverage(obj);\n  }\n\n};\n/** classes exported for reuse */\n\nmodule.exports.classes = {\n  /**\r\n   * the file coverage constructor\r\n   */\n  FileCoverage\n};","map":{"version":3,"sources":["C:/Users/vlasoks/Documents/GitHub/SUPE-map-demo/node_modules/istanbul-lib-coverage/index.js"],"names":["CoverageSummary","require","FileCoverage","CoverageMap","module","exports","createCoverageSummary","obj","createCoverageMap","createFileCoverage","classes"],"mappings":"AAAA;;;;AAIA;AAEA;;;;;;;;;AAQA,MAAMA,eAAe,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,eAA9C;;AACA,MAAME,YAAY,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAA3C;;AACA,MAAMC,WAAW,GAAGF,OAAO,CAAC,oBAAD,CAAP,CAA8BE,WAAlD;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACb;;;;;;AAMAC,EAAAA,qBAAqB,CAACC,GAAD,EAAM;AACvB,QAAIA,GAAG,IAAIA,GAAG,YAAYP,eAA1B,EAA2C;AACvC,aAAOO,GAAP;AACH;;AACD,WAAO,IAAIP,eAAJ,CAAoBO,GAApB,CAAP;AACH,GAZY;;AAab;;;;;;AAMAC,EAAAA,iBAAiB,CAACD,GAAD,EAAM;AACnB,QAAIA,GAAG,IAAIA,GAAG,YAAYJ,WAA1B,EAAuC;AACnC,aAAOI,GAAP;AACH;;AACD,WAAO,IAAIJ,WAAJ,CAAgBI,GAAhB,CAAP;AACH,GAxBY;;AAyBb;;;;;;AAMAE,EAAAA,kBAAkB,CAACF,GAAD,EAAM;AACpB,QAAIA,GAAG,IAAIA,GAAG,YAAYL,YAA1B,EAAwC;AACpC,aAAOK,GAAP;AACH;;AACD,WAAO,IAAIL,YAAJ,CAAiBK,GAAjB,CAAP;AACH;;AApCY,CAAjB;AAuCA;;AACAH,MAAM,CAACC,OAAP,CAAeK,OAAf,GAAyB;AACrB;;;AAGAR,EAAAA;AAJqB,CAAzB","sourcesContent":["/*\r\n Copyright 2012-2015, Yahoo Inc.\r\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * istanbul-lib-coverage exports an API that allows you to create and manipulate\r\n * file coverage, coverage maps (a set of file coverage objects) and summary\r\n * coverage objects. File coverage for the same file can be merged as can\r\n * entire coverage maps.\r\n *\r\n * @module Exports\r\n */\r\nconst CoverageSummary = require('./lib/file').CoverageSummary;\r\nconst FileCoverage = require('./lib/file').FileCoverage;\r\nconst CoverageMap = require('./lib/coverage-map').CoverageMap;\r\n\r\nmodule.exports = {\r\n    /**\r\n     * creates a coverage summary object\r\n     * @param {Object} obj an argument with the same semantics\r\n     *  as the one passed to the `CoverageSummary` constructor\r\n     * @returns {CoverageSummary}\r\n     */\r\n    createCoverageSummary(obj) {\r\n        if (obj && obj instanceof CoverageSummary) {\r\n            return obj;\r\n        }\r\n        return new CoverageSummary(obj);\r\n    },\r\n    /**\r\n     * creates a CoverageMap object\r\n     * @param {Object} obj optional - an argument with the same semantics\r\n     *  as the one passed to the CoverageMap constructor.\r\n     * @returns {CoverageMap}\r\n     */\r\n    createCoverageMap(obj) {\r\n        if (obj && obj instanceof CoverageMap) {\r\n            return obj;\r\n        }\r\n        return new CoverageMap(obj);\r\n    },\r\n    /**\r\n     * creates a FileCoverage object\r\n     * @param {Object} obj optional - an argument with the same semantics\r\n     *  as the one passed to the FileCoverage constructor.\r\n     * @returns {FileCoverage}\r\n     */\r\n    createFileCoverage(obj) {\r\n        if (obj && obj instanceof FileCoverage) {\r\n            return obj;\r\n        }\r\n        return new FileCoverage(obj);\r\n    }\r\n};\r\n\r\n/** classes exported for reuse */\r\nmodule.exports.classes = {\r\n    /**\r\n     * the file coverage constructor\r\n     */\r\n    FileCoverage\r\n};\r\n"]},"metadata":{},"sourceType":"script"}