{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vlasoks\\\\Documents\\\\GitHub\\\\SUPE-map-demo\\\\src\\\\components\\\\Graphic.js\";\nimport React from 'react';\nimport Plotly from \"plotly.js\";\nimport * as d3 from 'd3';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport data from '../graph_4.csv';\nconst Plot = createPlotlyComponent(Plotly);\nexport class GraphicGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: []\n    };\n  } // console.log(this.props.name);\n\n\n  render() {\n    d3.csv(data, (err, csv_data) => {\n      if (err) throw err;\n      console.log(csv_data);\n      this.setState({\n        csv_data\n      });\n    });\n    const {\n      results\n    } = this.state;\n    console.log({\n      results\n    });\n    return /*#__PURE__*/React.createElement(TestFunction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nfunction TestFunction(csv_data) {\n  console.log(csv_data);\n  return /*#__PURE__*/React.createElement(Plot, {\n    data: [{\n      x: [1, 2, 3],\n      y: [2, 6, 3],\n      type: 'scatter',\n      mode: 'lines+markers',\n      marker: {\n        color: 'red'\n      }\n    }, {\n      type: 'bar',\n      x: [1, 2, 3],\n      y: [2, 5, 3]\n    }],\n    layout: {\n      width: 320,\n      height: 240,\n      title: 'A Fancy Plot'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  });\n} //\n// function SingleGraphic(props) {\n//\n//   // if (props.type === 'scatter') {\n//   // d3.csv(data, function(cvs_data) {\n//   const trace1 = {\n//     type: \"scatter\",\n//     mode: \"lines\",\n//     name: 'AAPL High',\n//     x: unpack(cvs_data, 'Date'),\n//     y: unpack(cvs_data, 'AAPL.High'),\n//     line: {\n//       color: '#17BECF'\n//     }\n//   };\n//\n//   const trace2 = {\n//     type: \"scatter\",\n//     mode: \"lines\",\n//     name: 'AAPL Low',\n//     x: unpack(cvs_data, 'Date'),\n//     y: unpack(cvs_data, 'AAPL.Low'),\n//     line: {\n//       color: '#7F7F7F'\n//     }\n//   };\n//\n//   const data_combined = [trace1, trace2];\n//\n//   const layout = {\n//     title: 'Time Series with Rangeslider',\n//     xaxis: {\n//       autorange: true,\n//       range: [\n//         '2015-02-17', '2017-02-16'\n//       ],\n//       rangeselector: {\n//         buttons: [\n//           {\n//             count: 1,\n//             label: '1m',\n//             step: 'month',\n//             stepmode: 'backward'\n//           }, {\n//             count: 6,\n//             label: '6m',\n//             step: 'month',\n//             stepmode: 'backward'\n//           }, {\n//             step: 'all'\n//           }\n//         ]\n//       },\n//       rangeslider: {\n//         range: ['2015-02-17', '2017-02-16']\n//       },\n//       type: 'date'\n//     },\n//     yaxis: {\n//       autorange: true,\n//       range: [\n//         86.8700008333, 138.870004167\n//       ],\n//       type: 'linear'\n//     }\n//   };\n//\n//   return <Plot data={[\n//       {\n//         x: [\n//           1, 2, 3\n//         ],\n//         y: [\n//           2, 6, 3\n//         ],\n//         type: 'scatter',\n//         mode: 'lines+markers',\n//         marker: {\n//           color: 'red'\n//         }\n//       }, {\n//         type: 'bar',\n//         x: [\n//           1, 2, 3\n//         ],\n//         y: [2, 5, 3]\n//       }\n//     ]} layout={{\n//       width: 320,\n//       height: 240,\n//       title: 'A Fancy Plot'\n//     }}/>;\n//\n//   // });\n//\n//   // console.log(data_combined);\n//   // return <Plot data={[\n//   //     {\n//   //       x: [\n//   //         1, 2, 3\n//   //       ],\n//   //       y: [\n//   //         2, 6, 3\n//   //       ],\n//   //       type: 'scatter',\n//   //       mode: 'lines+markers',\n//   //       marker: {\n//   //         color: 'red'\n//   //       }\n//   //     }, {\n//   //       type: 'bar',\n//   //       x: [\n//   //         1, 2, 3\n//   //       ],\n//   //       y: [2, 5, 3]\n//   //     }\n//   //   ]} layout={{\n//   //     width: 320,\n//   //     height: 240,\n//   //     title: 'A Fancy Plot'\n//   //   }}/>\n// }\n//\n// function GetCSVData() {\n//   d3.csv(data, function(cvs_data) {\n//     const trace1 = {\n//       type: \"scatter\",\n//       mode: \"lines\",\n//       name: 'AAPL High',\n//       x: unpack(cvs_data, 'Date'),\n//       y: unpack(cvs_data, 'AAPL.High'),\n//       line: {\n//         color: '#17BECF'\n//       }\n//     };\n//\n//     const trace2 = {\n//       type: \"scatter\",\n//       mode: \"lines\",\n//       name: 'AAPL Low',\n//       x: unpack(cvs_data, 'Date'),\n//       y: unpack(cvs_data, 'AAPL.Low'),\n//       line: {\n//         color: '#7F7F7F'\n//       }\n//     };\n//\n//     const data_combined = [trace1, trace2];\n//\n//     console.log(data_combined);\n//\n//   });\n// }\n//\n// function unpack(rows, key) {\n//   return rows.map(function(row) {\n//     return row[key];\n//   });\n// }","map":{"version":3,"sources":["C:/Users/vlasoks/Documents/GitHub/SUPE-map-demo/src/components/Graphic.js"],"names":["React","Plotly","d3","createPlotlyComponent","data","Plot","GraphicGroup","Component","constructor","props","state","results","render","csv","err","csv_data","console","log","setState","TestFunction","x","y","type","mode","marker","color","width","height","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,MAAMC,IAAI,GAAGF,qBAAqB,CAACF,MAAD,CAAlC;AAEA,OAAO,MAAMK,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AAEhDC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGD,GAP+C,CAQhD;;;AAEAC,EAAAA,MAAM,GAAG;AACPV,IAAAA,EAAE,CAACW,GAAH,CAAOT,IAAP,EAAa,CAACU,GAAD,EAAMC,QAAN,KAAmB;AACpC,UAAGD,GAAH,EAAQ,MAAMA,GAAN;AACRE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAKG,QAAL,CAAc;AAACH,QAAAA;AAAD,OAAd;AACK,KAJD;AAMA,UAAM;AAACJ,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACN,MAAAA;AAAD,KAAZ;AAEA,wBAAQ,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAED;;AAvB+C;;AA2BlD,SAASQ,YAAT,CAAsBJ,QAAtB,EAAgC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,sBAAO,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,CACf;AACEK,MAAAA,CAAC,EAAE,CACD,CADC,EACE,CADF,EACK,CADL,CADL;AAIEC,MAAAA,CAAC,EAAE,CACD,CADC,EACE,CADF,EACK,CADL,CAJL;AAOEC,MAAAA,IAAI,EAAE,SAPR;AAQEC,MAAAA,IAAI,EAAE,eARR;AASEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AADD;AATV,KADe,EAaZ;AACDH,MAAAA,IAAI,EAAE,KADL;AAEDF,MAAAA,CAAC,EAAE,CACD,CADC,EACE,CADF,EACK,CADL,CAFF;AAKDC,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AALF,KAbY,CAAZ;AAoBF,IAAA,MAAM,EAAE;AACTK,MAAAA,KAAK,EAAE,GADE;AAETC,MAAAA,MAAM,EAAE,GAFC;AAGTC,MAAAA,KAAK,EAAE;AAHE,KApBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAysourcesContent":["import React from 'react';\r\nimport Plotly from \"plotly.js\"\r\nimport * as d3 from 'd3'\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nimport data from '../graph_4.csv';\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nexport class GraphicGroup extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      results: [],\r\n    };\r\n  }\r\n  // console.log(this.props.name);\r\n\r\n  render() {\r\n    d3.csv(data, (err, csv_data) => {\r\nif(err) throw err;\r\nconsole.log(csv_data);\r\nthis.setState({csv_data});\r\n    })\r\n\r\n    const {results} = this.state;\r\n\r\n    console.log({results});\r\n\r\n    return (<TestFunction/>);\r\n\r\n  }\r\n\r\n}\r\n\r\nfunction TestFunction(csv_data) {\r\n  console.log(csv_data);\r\n\r\n  return <Plot data={[\r\n      {\r\n        x: [\r\n          1, 2, 3\r\n        ],\r\n        y: [\r\n          2, 6, 3\r\n        ],\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        marker: {\r\n          color: 'red'\r\n        }\r\n      }, {\r\n        type: 'bar',\r\n        x: [\r\n          1, 2, 3\r\n        ],\r\n        y: [2, 5, 3]\r\n      }\r\n    ]} layout={{\r\n      width: 320,\r\n      height: 240,\r\n      title: 'A Fancy Plot'\r\n    }}/>\r\n}\r\n//\r\n// function SingleGraphic(props) {\r\n//\r\n//   // if (props.type === 'scatter') {\r\n//   // d3.csv(data, function(cvs_data) {\r\n//   const trace1 = {\r\n//     type: \"scatter\",\r\n//     mode: \"lines\",\r\n//     name: 'AAPL High',\r\n//     x: unpack(cvs_data, 'Date'),\r\n//     y: unpack(cvs_data, 'AAPL.High'),\r\n//     line: {\r\n//       color: '#17BECF'\r\n//     }\r\n//   };\r\n//\r\n//   const trace2 = {\r\n//     type: \"scatter\",\r\n//     mode: \"lines\",\r\n//     name: 'AAPL Low',\r\n//     x: unpack(cvs_data, 'Date'),\r\n//     y: unpack(cvs_data, 'AAPL.Low'),\r\n//     line: {\r\n//       color: '#7F7F7F'\r\n//     }\r\n//   };\r\n//\r\n//   const data_combined = [trace1, trace2];\r\n//\r\n//   const layout = {\r\n//     title: 'Time Series with Rangeslider',\r\n//     xaxis: {\r\n//       autorange: true,\r\n//       range: [\r\n//         '2015-02-17', '2017-02-16'\r\n//       ],\r\n//       rangeselector: {\r\n//         buttons: [\r\n//           {\r\n//             count: 1,\r\n//             label: '1m',\r\n//             step: 'month',\r\n//             stepmode: 'backward'\r\n//           }, {\r\n//             count: 6,\r\n//             label: '6m',\r\n//             step: 'month',\r\n//             stepmode: 'backward'\r\n//           }, {\r\n//             step: 'all'\r\n//           }\r\n//         ]\r\n//       },\r\n//       rangeslider: {\r\n//         range: ['2015-02-17', '2017-02-16']\r\n//       },\r\n//       type: 'date'\r\n//     },\r\n//     yaxis: {\r\n//       autorange: true,\r\n//       range: [\r\n//         86.8700008333, 138.870004167\r\n//       ],\r\n//       type: 'linear'\r\n//     }\r\n//   };\r\n//\r\n//   return <Plot data={[\r\n//       {\r\n//         x: [\r\n//           1, 2, 3\r\n//         ],\r\n//         y: [\r\n//           2, 6, 3\r\n//         ],\r\n//         type: 'scatter',\r\n//         mode: 'lines+markers',\r\n//         marker: {\r\n//           color: 'red'\r\n//         }\r\n//       }, {\r\n//         type: 'bar',\r\n//         x: [\r\n//           1, 2, 3\r\n//         ],\r\n//         y: [2, 5, 3]\r\n//       }\r\n//     ]} layout={{\r\n//       width: 320,\r\n//       height: 240,\r\n//       title: 'A Fancy Plot'\r\n//     }}/>;\r\n//\r\n//   // });\r\n//\r\n//   // console.log(data_combined);\r\n//   // return <Plot data={[\r\n//   //     {\r\n//   //       x: [\r\n//   //         1, 2, 3\r\n//   //       ],\r\n//   //       y: [\r\n//   //         2, 6, 3\r\n//   //       ],\r\n//   //       type: 'scatter',\r\n//   //       mode: 'lines+markers',\r\n//   //       marker: {\r\n//   //         color: 'red'\r\n//   //       }\r\n//   //     }, {\r\n//   //       type: 'bar',\r\n//   //       x: [\r\n//   //         1, 2, 3\r\n//   //       ],\r\n//   //       y: [2, 5, 3]\r\n//   //     }\r\n//   //   ]} layout={{\r\n//   //     width: 320,\r\n//   //     height: 240,\r\n//   //     title: 'A Fancy Plot'\r\n//   //   }}/>\r\n// }\r\n//\r\n// function GetCSVData() {\r\n//   d3.csv(data, function(cvs_data) {\r\n//     const trace1 = {\r\n//       type: \"scatter\",\r\n//       mode: \"lines\",\r\n//       name: 'AAPL High',\r\n//       x: unpack(cvs_data, 'Date'),\r\n//       y: unpack(cvs_data, 'AAPL.High'),\r\n//       line: {\r\n//         color: '#17BECF'\r\n//       }\r\n//     };\r\n//\r\n//     const trace2 = {\r\n//       type: \"scatter\",\r\n//       mode: \"lines\",\r\n//       name: 'AAPL Low',\r\n//       x: unpack(cvs_data, 'Date'),\r\n//       y: unpack(cvs_data, 'AAPL.Low'),\r\n//       line: {\r\n//         color: '#7F7F7F'\r\n//       }\r\n//     };\r\n//\r\n//     const data_combined = [trace1, trace2];\r\n//\r\n//     console.log(data_combined);\r\n//\r\n//   });\r\n// }\r\n//\r\n// function unpack(rows, key) {\r\n//   return rows.map(function(row) {\r\n//     return row[key];\r\n//   });\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}