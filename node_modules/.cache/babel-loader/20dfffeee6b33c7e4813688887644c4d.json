{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vlasoks\\\\Documents\\\\GitHub\\\\SUPE-map-demo\\\\src\\\\components\\\\Graphic.js\";\nimport React from 'react';\nimport Plotly from \"plotly.js\";\nimport * as d3 from 'd3';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport data from '../graph_4.csv';\nconst Plot = createPlotlyComponent(Plotly);\nexport class GraphicGroup extends React.Component {\n  // console.log(this.props.name);\n  render() {\n    return /*#__PURE__*/React.createElement(Plot, {\n      data: [{\n        x: [1, 2, 3],\n        y: [2, 6, 3],\n        type: 'scatter',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }, {\n        type: 'bar',\n        x: [1, 2, 3],\n        y: [2, 5, 3]\n      }],\n      layout: {\n        width: 320,\n        height: 240,\n        title: 'A Fancy Plot'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nfunction SingleGraphic(props) {\n  // if (props.type === 'scatter') {\n  d3.csv(data, function (cvs_data) {\n    const trace1 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL High',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.High'),\n      line: {\n        color: '#17BECF'\n      }\n    };\n    const trace2 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL Low',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.Low'),\n      line: {\n        color: '#7F7F7F'\n      }\n    };\n    const data_combined = [trace1, trace2];\n    console.log(data_combined);\n    const layout = {\n      title: 'Time Series with Rangeslider',\n      xaxis: {\n        autorange: true,\n        range: ['2015-02-17', '2017-02-16'],\n        rangeselector: {\n          buttons: [{\n            count: 1,\n            label: '1m',\n            step: 'month',\n            stepmode: 'backward'\n          }, {\n            count: 6,\n            label: '6m',\n            step: 'month',\n            stepmode: 'backward'\n          }, {\n            step: 'all'\n          }]\n        },\n        rangeslider: {\n          range: ['2015-02-17', '2017-02-16']\n        },\n        type: 'date'\n      },\n      yaxis: {\n        autorange: true,\n        range: [86.8700008333, 138.870004167],\n        type: 'linear'\n      }\n    };\n    return null;\n  }); // }\n  // const plotlydata =[\n  //   {\n  //     x: props.x_coordinates,\n  //     y: props.y_coordinates,\n  //     type: props.type,\n  //      fill: 'tonexty',\n  //   }\n  // ];\n  // return null;\n  // <Plot\n  //       data={plotlydata}\n  //       layout={ {width: 500, height: 500, title: props.name} }\n  //     />;\n}\n\nfunction GetCSVData() {\n  d3.csv(data, function (cvs_data) {\n    const trace1 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL High',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.High'),\n      line: {\n        color: '#17BECF'\n      }\n    };\n    const trace2 = {\n      type: \"scatter\",\n      mode: \"lines\",\n      name: 'AAPL Low',\n      x: unpack(cvs_data, 'Date'),\n      y: unpack(cvs_data, 'AAPL.Low'),\n      line: {\n        color: '#7F7F7F'\n      }\n    };\n    const data_combined = [trace1, trace2];\n    console.log(data_combined);\n  });\n}\n\nfunction unpack(rows, key) {\n  return rows.map(function (row) {\n    return row[key];\n  });\n}","map":{"version":3,"sources":["C:/Users/vlasoks/Documents/GitHub/SUPE-map-demo/src/components/Graphic.js"],"names":["React","Plotly","d3","createPlotlyComponent","data","Plot","GraphicGroup","Component","render","x","y","type","mode","marker","color","width","height","title","SingleGraphic","props","csv","cvs_data","trace1","name","unpack","line","trace2","data_combined","console","log","layout","xaxis","autorange","range","rangeselector","buttons","count","label","step","stepmode","rangeslider","yaxis","GetCSVData","rows","key","map","row"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Plotly from \"plotly.js\"\r\nimport * as d3 from 'd3'\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nimport data from '../graph_4.csv';\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nexport class GraphicGroup extends React.Component {\r\n  // console.log(this.props.name);\r\n  render() {\r\n    return (\r\n      <Plot\r\n              data={[\r\n                {\r\n                  x: [1, 2, 3],\r\n                  y: [2, 6, 3],\r\n                  type: 'scatter',\r\n                  mode: 'lines+markers',\r\n                  marker: {color: 'red'},\r\n                },\r\n                {type: 'bar', x: [1, 2, 3], y: [2, 5, 3]},\r\n              ]}\r\n              layout={ {width: 320, height: 240, title: 'A Fancy Plot'} }\r\n            />\r\n    );\r\n  }\r\n}\r\n\r\nfunction SingleGraphic(props) {\r\n\r\n  // if (props.type === 'scatter') {\r\n    d3.csv(data, function(cvs_data) {\r\n    const trace1 = {\r\n    type: \"scatter\",\r\n    mode: \"lines\",\r\n    name: 'AAPL High',\r\n    x: unpack(cvs_data, 'Date'),\r\n    y: unpack(cvs_data, 'AAPL.High'),\r\n    line: {color: '#17BECF'}\r\n  };\r\n\r\n  const trace2 = {\r\n    type: \"scatter\",\r\n    mode: \"lines\",\r\n    name: 'AAPL Low',\r\n    x: unpack(cvs_data, 'Date'),\r\n    y: unpack(cvs_data, 'AAPL.Low'),\r\n    line: {color: '#7F7F7F'}\r\n  };\r\n\r\n  const data_combined = [trace1, trace2];\r\n\r\n  console.log(data_combined);\r\n\r\n  const layout = {\r\n  title: 'Time Series with Rangeslider',\r\n  xaxis: {\r\n    autorange: true,\r\n    range: ['2015-02-17', '2017-02-16'],\r\n    rangeselector: {buttons: [\r\n        {\r\n          count: 1,\r\n          label: '1m',\r\n          step: 'month',\r\n          stepmode: 'backward'\r\n        },\r\n        {\r\n          count: 6,\r\n          label: '6m',\r\n          step: 'month',\r\n          stepmode: 'backward'\r\n        },\r\n        {step: 'all'}\r\n      ]},\r\n    rangeslider: {range: ['2015-02-17', '2017-02-16']},\r\n    type: 'date'\r\n  },\r\n  yaxis: {\r\n    autorange: true,\r\n    range: [86.8700008333, 138.870004167],\r\n    type: 'linear'\r\n  }\r\n};\r\n\r\nreturn  null\r\n\r\n    });\r\n  // }\r\n\r\n  // const plotlydata =[\r\n  //   {\r\n  //     x: props.x_coordinates,\r\n  //     y: props.y_coordinates,\r\n  //     type: props.type,\r\n  //      fill: 'tonexty',\r\n  //   }\r\n  // ];\r\n  // return null;\r\n  // <Plot\r\n  //       data={plotlydata}\r\n  //       layout={ {width: 500, height: 500, title: props.name} }\r\n  //     />;\r\n\r\n}\r\n\r\nfunction GetCSVData() {\r\n  d3.csv(data, function(cvs_data) {\r\n  const trace1 = {\r\n  type: \"scatter\",\r\n  mode: \"lines\",\r\n  name: 'AAPL High',\r\n  x: unpack(cvs_data, 'Date'),\r\n  y: unpack(cvs_data, 'AAPL.High'),\r\n  line: {color: '#17BECF'}\r\n};\r\n\r\nconst trace2 = {\r\n  type: \"scatter\",\r\n  mode: \"lines\",\r\n  name: 'AAPL Low',\r\n  x: unpack(cvs_data, 'Date'),\r\n  y: unpack(cvs_data, 'AAPL.Low'),\r\n  line: {color: '#7F7F7F'}\r\n};\r\n\r\nconst data_combined = [trace1, trace2];\r\n\r\nconsole.log(data_combined);\r\n\r\n  });\r\n}\r\n\r\n\r\nfunction unpack(rows, key) {\r\n  return rows.map(function(row) {\r\n    return row[key];\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}