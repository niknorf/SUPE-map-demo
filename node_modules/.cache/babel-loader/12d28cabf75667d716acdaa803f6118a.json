{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar constants = require('./constants');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar maxRowLength = require('../../lib').maxRowLength;\n\nvar sizeOf = require('image-size');\n\nvar dataUri = require('../../snapshot/helpers').IMAGE_URL_PREFIX;\n\nvar Buffer = require('buffer/').Buffer; // note: the trailing slash is important!\n\n\nmodule.exports = function calc(gd, trace) {\n  var h;\n  var w;\n\n  if (trace._hasZ) {\n    h = trace.z.length;\n    w = maxRowLength(trace.z);\n  } else if (trace._hasSource) {\n    var size = getImageSize(trace.source);\n    h = size.height;\n    w = size.width;\n  }\n\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var x0 = xa.d2c(trace.x0) - trace.dx / 2;\n  var y0 = ya.d2c(trace.y0) - trace.dy / 2; // Set axis range\n\n  var i;\n  var xrange = [x0, x0 + w * trace.dx];\n  var yrange = [y0, y0 + h * trace.dy];\n  if (xa && xa.type === 'log') for (i = 0; i < w; i++) xrange.push(x0 + i * trace.dx);\n  if (ya && ya.type === 'log') for (i = 0; i < h; i++) yrange.push(y0 + i * trace.dy);\n  trace._extremes[xa._id] = Axes.findExtremes(xa, xrange);\n  trace._extremes[ya._id] = Axes.findExtremes(ya, yrange);\n  trace._scaler = makeScaler(trace);\n  var cd0 = {\n    x0: x0,\n    y0: y0,\n    z: trace.z,\n    w: w,\n    h: h\n  };\n  return [cd0];\n};\n\nfunction scale(zero, ratio, min, max) {\n  return function (c) {\n    return Lib.constrain((c - zero) * ratio, min, max);\n  };\n}\n\nfunction constrain(min, max) {\n  return function (c) {\n    return Lib.constrain(c, min, max);\n  };\n} // Generate a function to scale color components according to zmin/zmax and the colormodel\n\n\nfunction makeScaler(trace) {\n  var cr = constants.colormodel[trace.colormodel];\n  var colormodel = cr.colormodel || trace.colormodel;\n  var n = colormodel.length;\n  trace._sArray = []; // Loop over all color components\n\n  for (var k = 0; k < n; k++) {\n    if (cr.min[k] !== trace.zmin[k] || cr.max[k] !== trace.zmax[k]) {\n      trace._sArray.push(scale(trace.zmin[k], (cr.max[k] - cr.min[k]) / (trace.zmax[k] - trace.zmin[k]), cr.min[k], cr.max[k]));\n    } else {\n      trace._sArray.push(constrain(cr.min[k], cr.max[k]));\n    }\n  }\n\n  return function (pixel) {\n    var c = pixel.slice(0, n);\n\n    for (var k = 0; k < n; k++) {\n      var ck = c[k];\n      if (!isNumeric(ck)) return false;\n      c[k] = trace._sArray[k](ck);\n    }\n\n    return c;\n  };\n} // Get image size\n\n\nfunction getImageSize(src) {\n  var data = src.replace(dataUri, '');\n  var buff = new Buffer(data, 'base64');\n  return sizeOf(buff);\n}","map":{"version":3,"sources":["C:/Users/vlasoks/Documents/GitHub/SUPE-map-demo/node_modules/plotly.js/src/traces/image/calc.js"],"names":["Lib","require","constants","isNumeric","Axes","maxRowLength","sizeOf","dataUri","IMAGE_URL_PREFIX","Buffer","module","exports","calc","gd","trace","h","w","_hasZ","z","length","_hasSource","size","getImageSize","source","height","width","xa","getFromId","xaxis","ya","yaxis","x0","d2c","dx","y0","dy","i","xrange","yrange","type","push","_extremes","_id","findExtremes","_scaler","makeScaler","cd0","scale","zero","ratio","min","max","c","constrain","cr","colormodel","n","_sArray","k","zmin","zmax","pixel","slice","ck","src","data","replace","buff"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar constants = require('./constants');\nvar isNumeric = require('fast-isnumeric');\nvar Axes = require('../../plots/cartesian/axes');\nvar maxRowLength = require('../../lib').maxRowLength;\nvar sizeOf = require('image-size');\nvar dataUri = require('../../snapshot/helpers').IMAGE_URL_PREFIX;\nvar Buffer = require('buffer/').Buffer;  // note: the trailing slash is important!\n\nmodule.exports = function calc(gd, trace) {\n    var h;\n    var w;\n    if(trace._hasZ) {\n        h = trace.z.length;\n        w = maxRowLength(trace.z);\n    } else if(trace._hasSource) {\n        var size = getImageSize(trace.source);\n        h = size.height;\n        w = size.width;\n    }\n\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n\n    var x0 = xa.d2c(trace.x0) - trace.dx / 2;\n    var y0 = ya.d2c(trace.y0) - trace.dy / 2;\n\n    // Set axis range\n    var i;\n    var xrange = [x0, x0 + w * trace.dx];\n    var yrange = [y0, y0 + h * trace.dy];\n    if(xa && xa.type === 'log') for(i = 0; i < w; i++) xrange.push(x0 + i * trace.dx);\n    if(ya && ya.type === 'log') for(i = 0; i < h; i++) yrange.push(y0 + i * trace.dy);\n    trace._extremes[xa._id] = Axes.findExtremes(xa, xrange);\n    trace._extremes[ya._id] = Axes.findExtremes(ya, yrange);\n    trace._scaler = makeScaler(trace);\n\n    var cd0 = {\n        x0: x0,\n        y0: y0,\n        z: trace.z,\n        w: w,\n        h: h\n    };\n    return [cd0];\n};\n\nfunction scale(zero, ratio, min, max) {\n    return function(c) {\n        return Lib.constrain((c - zero) * ratio, min, max);\n    };\n}\n\nfunction constrain(min, max) {\n    return function(c) { return Lib.constrain(c, min, max);};\n}\n\n// Generate a function to scale color components according to zmin/zmax and the colormodel\nfunction makeScaler(trace) {\n    var cr = constants.colormodel[trace.colormodel];\n    var colormodel = (cr.colormodel || trace.colormodel);\n    var n = colormodel.length;\n\n    trace._sArray = [];\n    // Loop over all color components\n    for(var k = 0; k < n; k++) {\n        if(cr.min[k] !== trace.zmin[k] || cr.max[k] !== trace.zmax[k]) {\n            trace._sArray.push(scale(\n                trace.zmin[k],\n                (cr.max[k] - cr.min[k]) / (trace.zmax[k] - trace.zmin[k]),\n                cr.min[k],\n                cr.max[k]\n            ));\n        } else {\n            trace._sArray.push(constrain(cr.min[k], cr.max[k]));\n        }\n    }\n\n    return function(pixel) {\n        var c = pixel.slice(0, n);\n        for(var k = 0; k < n; k++) {\n            var ck = c[k];\n            if(!isNumeric(ck)) return false;\n            c[k] = trace._sArray[k](ck);\n        }\n        return c;\n    };\n}\n\n// Get image size\nfunction getImageSize(src) {\n    var data = src.replace(dataUri, '');\n    var buff = new Buffer(data, 'base64');\n    return sizeOf(buff);\n}\n"]},"metadata":{},"sourceType":"script"}